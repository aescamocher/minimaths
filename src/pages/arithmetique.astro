---
import Header from '../components/Header.astro';
import '../styles/global.css';
---
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <title>MiniMaths – Arithmétique</title>
<meta name="description" content="Exercices interactifs corrigés sur l'arithmétique au collège." />


  </head>

  <body>
    <Header />
    <main class="container">
      <h2>Arithmétique</h2>

      <!-- Image + légende -->
      <div style="margin-bottom: 2rem;">
        <img src="/images/crible.jpeg" alt="Crible d'Eratosthène" style="width: 100%; border-radius: 12px;" />
        <p style="text-align: center; font-style: italic; margin-top: 0.5rem;">
          « Pour trouver les nombres premiers inférieurs à 100, on peut utiliser le fameux crible d'Eratosthène. »
        </p>
      </div>

      <h3 class="section-title">
        <span class="arrow"></span>
        <span class="title-text">1. Nombres premiers</span>
        <span class="cta">Cliquez pour ouvrir ▼</span>
      </h3>
      <div class="collapsible-section">

<section class="example-corrected" data-title="Exemple corrigé">
        <div style="text-align: center; margin-bottom: 1rem;">
          <img src="/images/nombrepremier.jpeg" alt="Nombre premier" style="max-width: 100%; border-radius: 12px;" />
        </div>

<div style="font-family: system-ui, sans-serif; margin: 2rem 0;">
  <p style="font-weight: bold; margin-bottom: 0.5rem;">Liste :</p>
  <div style="display: flex; flex-wrap: wrap; gap: 0.5rem; max-width: 420px;">
    <input id="champL1" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    <input id="champL2" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    <input id="champL3" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    <input id="champL4" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    <input id="champL5" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    <input id="champL6" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    <input id="champL7" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    <input id="champL8" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    <input id="champL9" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    <input id="champL10" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
  </div>
  <button
    id="validerListe"
    style="margin-top: 0.7rem; background-color: #4f46e5; color: white; border: none; padding: 0.4rem 1rem; border-radius: 6px; cursor: pointer; font-weight: 600;"
  >
    Valider
  </button>
  <p id="feedbackListe" style="margin-top: 0.5rem; font-weight: 600; min-height: 1.2em;"></p>
</div>

<script>
  document.getElementById('validerListe').addEventListener('click', () => {
    const attendu = ['2','3','5','7','11','13','17','19','23','29'];
    const saisis = [];

    for (let i = 1; i <= 10; i++) {
      const val = document.getElementById('champL' + i).value.trim();
      if (val !== '') saisis.push(val);
    }

    const feedback = document.getElementById('feedbackListe');

    if (saisis.length !== 10) {
      feedback.textContent = '❌ Il faut remplir les 10 champs.';
      feedback.style.color = '#d90429';
      return;
    }

    const reste = [...attendu];
    let correct = true;
    for (let val of saisis) {
      const index = reste.indexOf(val);
      if (index === -1) {
        correct = false;
        break;
      } else {
        reste.splice(index, 1);
      }
    }

    if (correct && reste.length === 0) {
      feedback.textContent = '✅ Bravo ! Tous les nombres sont corrects.';
      feedback.style.color = '#198754';
    } else {
      feedback.textContent = '❌ Mauvaise réponse. Essaie encore.';
      feedback.style.color = '#d90429';
    }
  });
</script>


</section>

<section class="training-links" data-title="Pour s’entraîner">

<div id="primeQuizWrapper" style="font-family: system-ui, sans-serif; margin: 2rem 0; text-align: center;">
  <button id="startPrimeQuiz" style="font-size: 1.3rem; font-weight: bold; padding: 0.6rem 1.4rem; background-color: #4f46e5; color: white; border: none; border-radius: 8px; cursor: pointer;">
    🎲 Génère tes 5 nombres, trouve ceux qui sont premiers !
  </button>

  <div id="primeQuizContainer" style="margin-top: 2rem; display: none;">
    <p id="primeQuestion" style="font-size: 1.5rem; font-weight: bold;"></p>
    <div style="margin-top: 1.5rem;">
      <button id="btnPremier" style="font-size: 1.1rem; background-color: #4f46e5; color: white; border: none; padding: 0.5rem 1.2rem; border-radius: 8px; cursor: pointer; margin-right: 1.2rem;">✅ Premier</button>
      <button id="btnPasPremier" style="font-size: 1.1rem; background-color: #ef4444; color: white; border: none; padding: 0.5rem 1.2rem; border-radius: 8px; cursor: pointer;">❌ Pas premier</button>
    </div>
    <p id="primeFeedback" style="margin-top: 1.2rem; font-weight: 600; font-size: 1.2rem; min-height: 1.8em;"></p>
    <p id="primeScoreFinal" style="font-size: 1.4rem; font-weight: bold; margin-top: 2rem;"></p>
    <button id="replayPrimeQuiz" style="display: none; background-color: #10b981; color: white; border: none; padding: 0.5rem 1.3rem; font-size: 1.1rem; border-radius: 8px; cursor: pointer; margin-top: 1rem;">
      🔁 Rejouer une série !
    </button>
  </div>
</div>

<script>
  (() => {
    const diviseurs = {};
    const isPrime = (n) => {
      if (n < 2) return false;
      for (let i = 2; i <= Math.sqrt(n); i++) {
        if (n % i === 0) {
          if (!diviseurs[n]) diviseurs[n] = [i, n / i];
          return false;
        }
      }
      return true;
    };

    const generateNumbers = () => {
      const list = [];
      while (list.length < 5) {
        const n = Math.floor(Math.random() * 100) + 1;
        if (!list.includes(n)) {
          isPrime(n); // cache les diviseurs
          list.push(n);
        }
      }
      return list;
    };

    const state = {
      current: 0,
      score: 0,
      values: []
    };

    const q = document.getElementById("primeQuestion");
    const feedback = document.getElementById("primeFeedback");
    const scoreFinal = document.getElementById("primeScoreFinal");
    const replayBtn = document.getElementById("replayPrimeQuiz");
    const btnYes = document.getElementById("btnPremier");
    const btnNo = document.getElementById("btnPasPremier");
    const container = document.getElementById("primeQuizContainer");
    const startBtn = document.getElementById("startPrimeQuiz");

    const loadQuestion = () => {
      feedback.textContent = "";
      q.textContent = `Nombre ${state.current + 1}/5 : ${state.values[state.current]}`;
    };

    const showScore = () => {
      q.textContent = "";
      feedback.textContent = "";
      let mention = "";
      const s = state.score;
      if (s <= 3) mention = "❌ À revoir !";
      else if (s <= 4) mention = "⚠️ Presque !";
      else mention = "🎉 Bravo !";

      scoreFinal.textContent = `Score : ${s}/5 – ${mention}`;
      replayBtn.style.display = "inline-block";
    };

    const handleAnswer = (userSaysPrime) => {
      const val = state.values[state.current];
      const prime = isPrime(val);

      if (prime === userSaysPrime) {
        feedback.textContent = "✅ Bonne réponse !";
        feedback.style.color = "#198754";
        state.score++;
      } else {
        feedback.textContent = "❌ Mauvaise réponse.";
        feedback.style.color = "#d90429";
        if (!prime && diviseurs[val]) {
          const [a, b] = diviseurs[val];
          feedback.textContent += ` ${val} = ${a} × ${b}`;
        }
      }

      setTimeout(() => {
        state.current++;
        if (state.current < 5) {
          loadQuestion();
        } else {
          showScore();
        }
      }, 1000);
    };

    const startQuiz = () => {
      state.values = generateNumbers();
      state.current = 0;
      state.score = 0;
      scoreFinal.textContent = "";
      replayBtn.style.display = "none";
      container.style.display = "block";
      loadQuestion();
    };

    btnYes.addEventListener("click", () => handleAnswer(true));
    btnNo.addEventListener("click", () => handleAnswer(false));
    replayBtn.addEventListener("click", startQuiz);
    startBtn.addEventListener("click", startQuiz);
  })();
</script>



</section>
</div>

            <h3 class="section-title">
        <span class="arrow"></span>
        <span class="title-text">2. Decomposition en produit de facteurs premiers</span>
        <span class="cta">Cliquez pour ouvrir ▼</span>
      </h3>
      <div class="collapsible-section">

<section class="example-corrected" data-title="Exemple corrigé">
        <div style="text-align: center; margin-bottom: 1rem;">
          <img src="/images/decomposition.jpeg" alt="Décomposition" style="max-width: 100%; border-radius: 12px;" />
        </div>   

<div style="font-family: system-ui, sans-serif; margin: 2rem 0; gap: 2rem; display: flex; flex-wrap: wrap;">

  <!-- Question 1 -->
  <div style="flex: 1 1 250px;">
    <p style="font-weight: bold;">54 =</p>
    <div style="display: flex; gap: 0.5rem; margin-bottom: 0.5rem;">
      <input id="q1c1" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
      <input id="q1c2" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
      <input id="q1c3" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
      <input id="q1c4" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    </div>
    <button
      id="validerQ1"
      style="background-color: #4f46e5; color: white; border: none; padding: 0.4rem 1rem; border-radius: 6px; cursor: pointer; font-weight: 600;"
    >
      Valider
    </button>
    <p id="feedbackQ1" style="margin-top: 0.5rem; font-weight: 600; min-height: 1.2em;"></p>
  </div>

  <!-- Question 2 -->
  <div style="flex: 1 1 250px;">
    <p style="font-weight: bold;">36 =</p>
    <div style="display: flex; gap: 0.5rem; margin-bottom: 0.5rem;">
      <input id="q2c1" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
      <input id="q2c2" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
      <input id="q2c3" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
      <input id="q2c4" style="width: 40px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    </div>
    <button
      id="validerQ2"
      style="background-color: #4f46e5; color: white; border: none; padding: 0.4rem 1rem; border-radius: 6px; cursor: pointer; font-weight: 600;"
    >
      Valider
    </button>
    <p id="feedbackQ2" style="margin-top: 0.5rem; font-weight: 600; min-height: 1.2em;"></p>
  </div>

  <!-- Question 3 -->
  <div style="flex: 1 1 250px;">
    <p style="font-weight: bold;">54 / 36 =</p>
    <div style="display: flex; gap: 0.5rem; align-items: center; margin-bottom: 0.5rem;">
      <input id="q3c1" placeholder="numérateur" style="width: 60px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
      <span>/</span>
      <input id="q3c2" placeholder="dénominateur" style="width: 60px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
    </div>
    <button
      id="validerQ3"
      style="background-color: #4f46e5; color: white; border: none; padding: 0.4rem 1rem; border-radius: 6px; cursor: pointer; font-weight: 600;"
    >
      Valider
    </button>
    <p id="feedbackQ3" style="margin-top: 0.5rem; font-weight: 600; min-height: 1.2em;"></p>
  </div>

</div>

<script>
  function checkFacteurs(inputs, attendu) {
    const valeurs = inputs.map(id => document.getElementById(id).value.trim());
    const restants = [...attendu];
    for (const val of valeurs) {
      const index = restants.indexOf(val);
      if (index === -1) return false;
      restants.splice(index, 1);
    }
    return restants.length === 0;
  }

  // Valider Q1
  document.getElementById('validerQ1').addEventListener('click', () => {
    const valide = checkFacteurs(['q1c1', 'q1c2', 'q1c3', 'q1c4'], ['2', '3', '3', '3']);
    const fb = document.getElementById('feedbackQ1');
    if (valide) {
      fb.textContent = '✅ Bravo !';
      fb.style.color = '#198754';
    } else {
      fb.textContent = '❌ Mauvaise réponse.';
      fb.style.color = '#d90429';
    }
  });

  // Valider Q2
  document.getElementById('validerQ2').addEventListener('click', () => {
    const valide = checkFacteurs(['q2c1', 'q2c2', 'q2c3', 'q2c4'], ['2', '2', '3', '3']);
    const fb = document.getElementById('feedbackQ2');
    if (valide) {
      fb.textContent = '✅ Bravo !';
      fb.style.color = '#198754';
    } else {
      fb.textContent = '❌ Mauvaise réponse.';
      fb.style.color = '#d90429';
    }
  });

  // Valider Q3
  document.getElementById('validerQ3').addEventListener('click', () => {
    const num = document.getElementById('q3c1').value.trim();
    const den = document.getElementById('q3c2').value.trim();
    const fb = document.getElementById('feedbackQ3');
    if (num === '3' && den === '2') {
      fb.textContent = '✅ Bravo !';
      fb.style.color = '#198754';
    } else {
      fb.textContent = '❌ Mauvaise réponse.';
      fb.style.color = '#d90429';
    }
  });
</script>



</section>
<section class="training-links" data-title="Pour s’entraîner">

<div id="fractionQuizWrapper" style="font-family: system-ui, sans-serif; margin: 2rem auto; max-width: 500px; text-align: center;">
  <button id="startFracQuiz" style="font-size: 1.3rem; font-weight: bold; padding: 0.6rem 1.4rem; background-color: #4f46e5; color: white; border: none; border-radius: 8px; cursor: pointer;">
    🎲 Génère tes 5 fractions à simplifier !
  </button>

  <div id="fractionQuizContainer" style="margin-top: 2rem; display: none;">
    <p id="fractionQuestion" style="font-size: 1.4rem; font-weight: bold;"></p>
    <div style="margin-top: 1rem; display: flex; align-items: center; justify-content: center; gap: 0.5rem;">
      <label style="font-weight: 600;">=</label>
      <div style="display: flex; flex-direction: column; align-items: center;">
        <input id="frac_num" type="text" placeholder="num" style="width: 60px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
        <hr style="width: 80%; margin: 2px 0;" />
        <input id="frac_den" type="text" placeholder="den" style="width: 60px; text-align: center; padding: 0.3rem; border: 1.5px solid #ccc; border-radius: 6px;" />
      </div>
    </div>
    <button id="validerFrac" style="margin-top: 1rem; background-color: #4f46e5; color: white; border: none; padding: 0.5rem 1.2rem; border-radius: 8px; font-size: 1rem; cursor: pointer;">
      Valider
    </button>
    <p id="fractionFeedback" style="margin-top: 1.2rem; font-size: 1.1rem; font-weight: 600; min-height: 1.5em;"></p>
    <p id="fractionScoreFinal" style="font-size: 1.3rem; font-weight: bold; margin-top: 2rem;"></p>
    <button id="replayFracQuiz" style="display: none; background-color: #10b981; color: white; border: none; padding: 0.5rem 1.3rem; font-size: 1.1rem; border-radius: 8px; cursor: pointer; margin-top: 1rem;">
      🔁 Rejouer une série !
    </button>
  </div>
</div>

<script>
(() => {
  // PGCD pour simplifier
  function pgcd(a, b) {
    return b === 0 ? a : pgcd(b, a % b);
  }

  // Génère une fraction réductible >20, pas premiers
  function genererFraction() {
    const nonPrimes = [];
    for (let n = 21; n <= 100; n++) {
      let prime = true;
      for (let i = 2; i <= Math.sqrt(n); i++){
        if(n % i === 0){prime = false; break;}
      }
      if (!prime) nonPrimes.push(n);
    }
    const den = nonPrimes[Math.floor(Math.random() * nonPrimes.length)];
    const num = nonPrimes[Math.floor(Math.random() * nonPrimes.length)];
    const factor = pgcd(num, den);
    if (factor === 1) return genererFraction(); // on évite déjà irréductibles
    return { num, den, simpNum: num / factor, simpDen: den / factor };
  }

  let fractions = [], idx = 0, score = 0;
  const btnStart = document.getElementById("startFracQuiz");
  const container = document.getElementById("fractionQuizContainer");
  const txtQuestion = document.getElementById("fractionQuestion");
  const btnValider = document.getElementById("validerFrac");
  const txtFeedback = document.getElementById("fractionFeedback");
  const txtScore = document.getElementById("fractionScoreFinal");
  const btnReplay = document.getElementById("replayFracQuiz");

  function afficherFraction() {
    const f = fractions[idx];
    txtQuestion.textContent = `Fraction à simplifier (${idx+1}/5) : ${f.num}/${f.den}`;
    txtFeedback.textContent = "";
    document.getElementById("frac_num").value = "";
    document.getElementById("frac_den").value = "";
  }

  btnValider.addEventListener("click", () => {
    const f = fractions[idx];
    const n = parseInt(document.getElementById("frac_num").value.trim());
    const d = parseInt(document.getElementById("frac_den").value.trim());
    if (isNaN(n) || isNaN(d) || d === 0) {
      txtFeedback.textContent = "⚠️ Merci d’entrer une fraction correcte (numérateur et dénominateur entiers).";
      txtFeedback.style.color = "#d97706";
      return;
    }
    if (n === f.simpNum && d === f.simpDen) {
      txtFeedback.textContent = "✅ Correct !";
      txtFeedback.style.color = "#198754";
      score++;
    } else {
      txtFeedback.textContent = `❌ Non : la forme irréductible est ${f.simpNum}/${f.simpDen}`;
      txtFeedback.style.color = "#dc2626";
    }
    setTimeout(() => {
      idx++;
      if (idx < 5) {
        afficherFraction();
      } else {
        let mention = score === 5 ? "🎉 Parfait !" :
                      score >= 4 ? "⚠️ Presque !" :
                      "❌ À revoir !";
        txtScore.textContent = `Score : ${score}/5 – ${mention}`;
        btnReplay.style.display = "inline-block";
      }
    }, 800);
  });

  btnReplay.addEventListener("click", () => {
    commencerQuiz();
  });

  btnStart.addEventListener("click", () => {
    commencerQuiz();
    container.style.display = "block";
  });

  function commencerQuiz() {
    fractions = [];
    idx = 0;
    score = 0;
    txtScore.textContent = "";
    btnReplay.style.display = "none";
    for (let i = 0; i < 5; i++) fractions.push(genererFraction());
    afficherFraction();
  }
})();
</script>


</section>
</div>

            <h3 class="section-title">
        <span class="arrow"></span>
        <span class="title-text">3. Problème de partage - PGCD</span>
        <span class="cta">Cliquez pour ouvrir ▼</span>
      </h3>
      <div class="collapsible-section">
      
<section class="example-corrected" data-title="Exemple corrigé">
       <div style="text-align: center; margin-bottom: 1rem;">
          <img src="/images/PGCD.jpeg" alt="PGCD" style="max-width: 100%; border-radius: 12px;" />
        </div>  
    
<div style="display: flex; gap: 2rem; flex-wrap: wrap; font-family: system-ui, sans-serif; margin: 2rem 0;">

  <!-- Bloc gauche -->
  <div style="flex: 1 1 220px; min-width: 200px;">
    <p><strong>Nombre maximal de bouquets :</strong></p>
    <input
      id="bouquetsMax"
      placeholder="?"
      style="width: 80px; padding: 0.4rem; text-align: center; border: 1.5px solid #ccc; border-radius: 6px;"
    />
    <button
      id="validerBouquets"
      style="margin-top: 0.5rem; background-color: #4f46e5; color: white; border: none; padding: 0.3rem 0.8rem; border-radius: 6px; cursor: pointer; font-weight: 600;"
    >
      Valider
    </button>
    <p id="feedbackBouquets" style="margin-top: 0.3rem; font-weight: 600; min-height: 1.2em;"></p>
  </div>

  <!-- Bloc droite -->
  <div style="flex: 1 1 300px; min-width: 200px;">
    <p><strong>Composition :</strong></p>
    <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
      <input id="rosesInput" placeholder="Roses" style="width: 60px; padding: 0.3rem; text-align: center; border: 1.5px solid #ccc; border-radius: 6px;" />
      <input id="tulipesInput" placeholder="Tulipes" style="width: 60px; padding: 0.3rem; text-align: center; border: 1.5px solid #ccc; border-radius: 6px;" />
      <input id="pivoinesInput" placeholder="Pivoines" style="width: 60px; padding: 0.3rem; text-align: center; border: 1.5px solid #ccc; border-radius: 6px;" />
    </div>
    <button
      id="validerComposition"
      style="margin-top: 0.5rem; background-color: #4f46e5; color: white; border: none; padding: 0.3rem 0.8rem; border-radius: 6px; cursor: pointer; font-weight: 600;"
    >
      Valider
    </button>
    <p id="feedbackComposition" style="margin-top: 0.3rem; font-weight: 600; min-height: 1.2em;"></p>
  </div>
</div>

<script>
  document.getElementById("validerBouquets").addEventListener("click", () => {
    const val = document.getElementById("bouquetsMax").value.trim();
    const feedback = document.getElementById("feedbackBouquets");
    if (val === "17") {
      feedback.textContent = "✅ Bravo !";
      feedback.style.color = "#198754";
    } else {
      feedback.textContent = "❌ Mauvaise réponse.";
      feedback.style.color = "#d90429";
    }
  });

  document.getElementById("validerComposition").addEventListener("click", () => {
    const val1 = document.getElementById("rosesInput").value.trim();
    const val2 = document.getElementById("tulipesInput").value.trim();
    const val3 = document.getElementById("pivoinesInput").value.trim();
    const feedback = document.getElementById("feedbackComposition");

    if (val1 === "15" && val2 === "22" && val3 === "4") {
      feedback.textContent = "✅ Bonne composition !";
      feedback.style.color = "#198754";
    } else {
      feedback.textContent = "❌ Vérifie ta composition.";
      feedback.style.color = "#d90429";
    }
  });
</script>


</section>
<section class="training-links" data-title="Pour s’entraîner">

<div id="gcdBouquetsWrapper" style="font-family: system-ui, sans-serif; margin: 2rem auto; max-width: 600px; text-align: center;">
  <button id="startGcdBouquets" style="font-size: 1.3rem; font-weight: bold; padding: 0.6rem 1.4rem; background-color: #4f46e5; color: white; border: none; border-radius: 8px; cursor: pointer;">
    🎲 Génère tes 5 problèmes de bouquets !
  </button>

  <div id="gcdBouquetsContainer" style="margin-top: 2rem; display: none;">
    <p id="gcdBouquetsEnonce" style="font-size: 1.3rem; font-weight: bold; line-height: 1.4em;"></p>

    <div style="margin: 1rem 0; display: flex; gap: 1rem; justify-content: center; align-items: center;">
      <div>
        <label style="font-weight: 600;">Nombre de bouquets :</label><br>
        <input id="gcdNb" type="text" style="width: 60px; padding: 0.3rem; text-align: center; border: 1.5px solid #ccc; border-radius: 6px;" />
      </div>
      <div>
        <label style="font-weight: 600;">Composition (t,r,p) :</label><br>
        <div style="display: flex; gap: 0.3rem;">
          <input id="gcdNt" placeholder="t" style="width: 50px; padding: 0.3rem; text-align: center; border: 1.5px solid #ccc; border-radius: 6px;" />
          <input id="gcdNr" placeholder="r" style="width: 50px; padding: 0.3rem; text-align: center; border: 1.5px solid #ccc; border-radius: 6px;" />
          <input id="gcdNp" placeholder="p" style="width: 50px; padding: 0.3rem; text-align: center; border: 1.5px solid #ccc; border-radius: 6px;" />
        </div>
      </div>
    </div>

    <button id="validerGcdBouquets" style="background-color: #4f46e5; color: white; border: none; padding: 0.5rem 1.2rem; border-radius: 8px; font-size: 1rem; cursor: pointer;">
      Valider
    </button>

    <p id="gcdBouquetsFeedback" style="margin-top: 1.2rem; font-size: 1.1rem; font-weight: 600; min-height: 2em;"></p>
    <p id="gcdBouquetsScore" style="font-size: 1.3rem; font-weight: bold; margin-top: 2rem;"></p>

    <button id="replayGcdBouquets" style="display: none; background-color: #10b981; color: white; border: none; padding: 0.5rem 1.3rem; font-size: 1.1rem; border-radius: 8px; cursor: pointer; margin-top: 1rem;">
      🔁 Rejouer une série !
    </button>
  </div>
</div>

<script>
(() => {
  function pgcd(a, b) {
    return b === 0 ? a : pgcd(b, a % b);
  }

  function genTriple() {
    let t, r, p, g;
    do {
      t = Math.floor(Math.random() * 481) + 20;
      r = Math.floor(Math.random() * 481) + 20;
      p = Math.floor(Math.random() * 481) + 20;
      g = pgcd(pgcd(t, r), p);
    } while (g < 2);
    return { t, r, p, g };
  }

  let list = [], idx = 0, score = 0;
  const start = document.getElementById("startGcdBouquets");
  const container = document.getElementById("gcdBouquetsContainer");
  const enonce = document.getElementById("gcdBouquetsEnonce");
  const inpNb = document.getElementById("gcdNb");
  const inpT = document.getElementById("gcdNt");
  const inpR = document.getElementById("gcdNr");
  const inpP = document.getElementById("gcdNp");
  const btnVal = document.getElementById("validerGcdBouquets");
  const fb = document.getElementById("gcdBouquetsFeedback");
  const scoreEl = document.getElementById("gcdBouquetsScore");
  const replay = document.getElementById("replayGcdBouquets");

  function showItem() {
    const q = list[idx];
    enonce.textContent = `On dispose de ${q.t} tulipes, ${q.r} roses et ${q.p} pivoines. On veut réaliser le plus de bouquets identiques en utilisant toutes les fleurs.`;
    inpNb.value = ""; inpT.value = ""; inpR.value = ""; inpP.value = "";
    fb.textContent = "";
  }

  start.addEventListener("click", () => {
    list = Array.from({length:5}, genTriple);
    idx = 0; score = 0;
    scoreEl.textContent = "";
    replay.style.display = "none";
    container.style.display = "block";
    showItem();
  });

  btnVal.addEventListener("click", () => {
    const q = list[idx];
    const nb = parseInt(inpNb.value);
    const nt = parseInt(inpT.value);
    const nr = parseInt(inpR.value);
    const np = parseInt(inpP.value);
    let ok = true;
    if (isNaN(nb) || isNaN(nt) || isNaN(nr) || isNaN(np)) ok = false;
    if (nb !== q.g || nt !== q.t / q.g || nr !== q.r / q.g || np !== q.p / q.g) ok = false;

    if (ok) {
      fb.textContent = "✅ Correct !";
      fb.style.color = "#198754";
      score++;
    } else {
      fb.textContent = `❌ Non : il faut ${q.g} bouquets, composition = (${q.t/q.g}, ${q.r/q.g}, ${q.p/q.g})`;
      fb.style.color = "#dc2626";
    }

    setTimeout(() => {
      idx++;
      if (idx < 5) showItem();
      else {
        const m = score === 5 ? "🎉 Parfait !" :
                  score >= 4 ? "⚠️ Presque !" :
                  "❌ À revoir !";
        scoreEl.textContent = `Score : ${score}/5 – ${m}`;
        replay.style.display = "inline-block";
      }
    }, 800);
  });

  replay.addEventListener("click", () => start.click());
})();
</script>


</section>
</div>

            <h3 class="section-title">
        <span class="arrow"></span>
        <span class="title-text">4. Problème d'engrenages - PPCM</span>
        <span class="cta">Cliquez pour ouvrir ▼</span>
      </h3>
      <div class="collapsible-section">
     
<section class="example-corrected" data-title="Exemple corrigé">
       <div style="text-align: center; margin-bottom: 1rem;">
          <img src="/images/PPCM.jpeg" alt="PPCM" style="max-width: 100%; border-radius: 12px;" />
        </div>   

<div style="font-family: system-ui, sans-serif; margin: 2rem 0;">
  <p style="font-weight: bold; margin-bottom: 1rem;">La première fois dans :</p>
  <div style="display: flex; align-items: flex-end; gap: 2rem;">
    
    <!-- Bloc secondes seul -->
    <div style="display: flex; flex-direction: column; align-items: center;">
      <input id="inputSecs1" placeholder="Secondes" style="width: 90px; text-align: center; padding: 0.4rem; border: 1.5px solid #ccc; border-radius: 6px;" />
      <button
        id="validerSecs1"
        style="margin-top: 0.4rem; background-color: #4f46e5; color: white; border: none; padding: 0.3rem 0.8rem; border-radius: 6px; cursor: pointer; font-weight: 600;"
      >
        Valider
      </button>
      <p id="feedbackSecs1" style="font-weight: 600; margin-top: 0.3rem; min-height: 1.2em;"></p>
    </div>

    <!-- Signe égal -->
    <p style="font-size: 1.5rem; font-weight: bold; align-self: center; margin-bottom: 4.2rem;">=</p>


    <!-- Bloc minutes + secondes -->
    <div style="display: flex; flex-direction: column; align-items: center;">
      <div style="display: flex; gap: 1rem;">
        <input id="inputMins2" placeholder="Minutes" style="width: 90px; text-align: center; padding: 0.4rem; border: 1.5px solid #ccc; border-radius: 6px;" />
        <input id="inputSecs2" placeholder="Secondes" style="width: 90px; text-align: center; padding: 0.4rem; border: 1.5px solid #ccc; border-radius: 6px;" />
      </div>
      <button
        id="validerGroup2"
        style="margin-top: 0.4rem; background-color: #4f46e5; color: white; border: none; padding: 0.3rem 0.8rem; border-radius: 6px; cursor: pointer; font-weight: 600;"
      >
        Valider
      </button>
      <p id="feedbackGroup2" style="font-weight: 600; margin-top: 0.3rem; min-height: 1.2em;"></p>
    </div>
  </div>
</div>

<script>
  // Validation du champ secondes seul
  document.getElementById("validerSecs1").addEventListener("click", () => {
    const sec = document.getElementById("inputSecs1").value.trim();
    const feedback = document.getElementById("feedbackSecs1");
    if (sec === "1683") {
      feedback.textContent = "✅ Bravo !";
      feedback.style.color = "#198754";
    } else {
      feedback.textContent = "❌ Mauvaise réponse.";
      feedback.style.color = "#d90429";
    }
  });

  // Validation du bloc minutes + secondes
  document.getElementById("validerGroup2").addEventListener("click", () => {
    const min = document.getElementById("inputMins2").value.trim();
    const sec = document.getElementById("inputSecs2").value.trim();
    const feedback = document.getElementById("feedbackGroup2");
    if (min === "28" && sec === "3") {
      feedback.textContent = "✅ Bravo !";
      feedback.style.color = "#198754";
    } else {
      feedback.textContent = "❌ Mauvaise réponse.";
      feedback.style.color = "#d90429";
    }
  });
</script>





</section>
<section class="training-links" data-title="Pour s’entraîner">

<div id="ppcmAmpoulesWrapper" style="font-family: system-ui, sans-serif; margin: 2rem auto; max-width: 600px; text-align: center;">
  <button id="startPpcmQuiz" style="font-size: 1.3rem; font-weight: bold; padding: 0.6rem 1.4rem; background-color: #4f46e5; color: white; border: none; border-radius: 8px; cursor: pointer;">
    🎲 Génère tes 5 problèmes d'ampoules !
  </button>

  <div id="ppcmAmpoulesContainer" style="margin-top: 2rem; display: none;">
    <p id="ppcmQuestion" style="font-size: 1.3rem; font-weight: bold; line-height: 1.4em;"></p>

    <input id="ppcmInput" type="text" placeholder="temps (s)" style="margin: 1rem auto; width: 100px; padding: 0.4rem; font-size: 1.1rem; text-align: center; border: 1.5px solid #ccc; border-radius: 6px;" />

    <button id="validerPpcm" style="background-color: #4f46e5; color: white; border: none; padding: 0.5rem 1.2rem; border-radius: 8px; font-size: 1rem; cursor: pointer;">
      Valider
    </button>

    <p id="ppcmFeedback" style="margin-top: 1.2rem; font-size: 1.1rem; font-weight: 600; min-height: 2em;"></p>
    <p id="ppcmScoreFinal" style="font-size: 1.3rem; font-weight: bold; margin-top: 2rem;"></p>

    <button id="replayPpcm" style="display: none; background-color: #10b981; color: white; border: none; padding: 0.5rem 1.3rem; font-size: 1.1rem; border-radius: 8px; cursor: pointer; margin-top: 1rem;">
      🔁 Rejouer une série !
    </button>
  </div>
</div>

<script>
(() => {
  function pgcd(a, b) {
    return b === 0 ? a : pgcd(b, a % b);
  }
  function ppcm(a, b) {
    return (a * b) / pgcd(a, b);
  }

  function genPair() {
    let x, y, p;
    do {
      x = Math.floor(Math.random() * 51) + 10; // 10 à 60
      y = Math.floor(Math.random() * 51) + 10;
      p = ppcm(x, y);
    } while (p > 300 || x === y);
    return { x, y, ppcm: p };
  }

  let questions = [], idx = 0, score = 0;
  const btnStart = document.getElementById("startPpcmQuiz");
  const container = document.getElementById("ppcmAmpoulesContainer");
  const enonce = document.getElementById("ppcmQuestion");
  const input = document.getElementById("ppcmInput");
  const btnValider = document.getElementById("validerPpcm");
  const feedback = document.getElementById("ppcmFeedback");
  const scoreFinal = document.getElementById("ppcmScoreFinal");
  const replayBtn = document.getElementById("replayPpcm");

  function showQuestion() {
    const q = questions[idx];
    enonce.textContent = `Deux ampoules clignotent, l’une toutes les ${q.x} s et l’autre toutes les ${q.y} s. Elles s’allument ensemble. Dans combien de temps s’allumeront-elles de nouveau ensemble ?`;
    input.value = "";
    feedback.textContent = "";
  }

  btnStart.addEventListener("click", () => {
    questions = Array.from({ length: 5 }, genPair);
    idx = 0; score = 0;
    container.style.display = "block";
    scoreFinal.textContent = "";
    replayBtn.style.display = "none";
    showQuestion();
  });

  btnValider.addEventListener("click", () => {
    const q = questions[idx];
    const val = parseInt(input.value.trim());
    if (isNaN(val)) {
      feedback.textContent = "⚠️ Merci d’entrer un nombre entier en secondes.";
      feedback.style.color = "#d97706";
      return;
    }

    if (val === q.ppcm) {
      feedback.textContent = "✅ Correct !";
      feedback.style.color = "#198754";
      score++;
    } else {
      feedback.textContent = `❌ Non : elles se rallumeront ensemble dans ${q.ppcm} secondes.`;
      feedback.style.color = "#dc2626";
    }

    setTimeout(() => {
      idx++;
      if (idx < 5) {
        showQuestion();
      } else {
        let mention = score === 5 ? "🎉 Parfait !" :
                      score >= 4 ? "⚠️ Presque !" :
                      "❌ À revoir !";
        scoreFinal.textContent = `Score : ${score}/5 – ${mention}`;
        replayBtn.style.display = "inline-block";
      }
    }, 900);
  });

  replayBtn.addEventListener("click", () => {
    btnStart.click();
  });
})();
</script>


</section>
</div>

            <h3 class="section-title">
        <span class="arrow"></span>
        <span class="title-text">5. Objectif Brevet</span>
        <span class="cta">Cliquez pour ouvrir ▼</span>
      </h3>
      <div class="collapsible-section">

<section class="example-corrected" data-title="QCM BILAN">
      <div class="video">
        <iframe width="100%" height="215"
          src="https://www.youtube.com/embed/uSNqaOGHhyA"
          title="QCM Arithmétique"
          frameborder="0"
          allowfullscreen>
        </iframe>
      </div>
</section>
<section class="training-links" data-title="Pour s’entraîner">
        <ul class="link-buttons">
          <li><a href="/docs/arithdnb1.pdf" target="_blank" class="pdf-button">📘 Exercices variés (Sésamaths)</a></li>
	<li><a href="/docs/arithdnb2.pdf" target="_blank" class="pdf-button">📘 Exercices DNB corrigés (Coopmaths)</a></li>
        </ul>
</section>
</div>

      <a href="/" class="btn">🏠 Retour à l’accueil</a>
    </main>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const titles = document.querySelectorAll('.collapsible-title, .section-title');
        titles.forEach(title => {
          const next = title.nextElementSibling;
          if (next && next.classList.contains('collapsible-section')) {
            title.addEventListener('click', () => {
              const isOpen = title.classList.toggle('open');
              next.classList.toggle('open', isOpen);
            });
          }
        });
      });
    </script>
  </body>
</html>
